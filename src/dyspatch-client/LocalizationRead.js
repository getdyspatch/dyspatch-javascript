/**
 * Dyspatch API
 * # Introduction  The Dyspatch API is based on the REST paradigm, and features resource based URLs with standard HTTP response codes to indicate errors. We use standard HTTP authentication and request verbs, and all responses are JSON formatted. See our [Implementation Guide](https://docs.dyspatch.io/development/implementing_dyspatch/) for more details on how to implement Dyspatch.  ## API Client Libraries Dyspatch provides API Clients for popular languages and web frameworks.  - [Java](https://github.com/getdyspatch/dyspatch-java) - [Javascript](https://github.com/getdyspatch/dyspatch-javascript) - [Python](https://github.com/getdyspatch/dyspatch-python) - [C#](https://github.com/getdyspatch/dyspatch-dotnet) - [Go](https://github.com/getdyspatch/dyspatch-golang) - [Ruby](https://github.com/getdyspatch/dyspatch-ruby) 
 *
 * The version of the OpenAPI document: 2020.04
 * Contact: support@dyspatch.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CompiledRead from './CompiledRead';

/**
 * The LocalizationRead model module.
 * @module dyspatch-client/LocalizationRead
 * @version 5.0.0
 */
class LocalizationRead {
    /**
     * Constructs a new <code>LocalizationRead</code>.
     * localization metadata and latest revision for associated template
     * @alias module:dyspatch-client/LocalizationRead
     */
    constructor() { 
        
        LocalizationRead.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>LocalizationRead</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:dyspatch-client/LocalizationRead} obj Optional instance to populate.
     * @return {module:dyspatch-client/LocalizationRead} The populated <code>LocalizationRead</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new LocalizationRead();

            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('languages')) {
                obj['languages'] = ApiClient.convertToType(data['languages'], ['String']);
            }
            if (data.hasOwnProperty('url')) {
                obj['url'] = ApiClient.convertToType(data['url'], 'String');
            }
            if (data.hasOwnProperty('template')) {
                obj['template'] = ApiClient.convertToType(data['template'], 'String');
            }
            if (data.hasOwnProperty('compiled')) {
                obj['compiled'] = CompiledRead.constructFromObject(data['compiled']);
            }
            if (data.hasOwnProperty('createdAt')) {
                obj['createdAt'] = ApiClient.convertToType(data['createdAt'], 'Date');
            }
            if (data.hasOwnProperty('updatedAt')) {
                obj['updatedAt'] = ApiClient.convertToType(data['updatedAt'], 'Date');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('localeGroup')) {
                obj['localeGroup'] = ApiClient.convertToType(data['localeGroup'], 'String');
            }
        }
        return obj;
    }


}

/**
 * An opaque, unique identifier for a localization
 * @member {String} id
 */
LocalizationRead.prototype['id'] = undefined;

/**
 * a list of locale codes that are available in the localization. See [supported languages](https://docs.dyspatch.io/localization/supported_languages/) for an exhaustive list of locale codes. 
 * @member {Array.<String>} languages
 */
LocalizationRead.prototype['languages'] = undefined;

/**
 * The API url for a specific localization
 * @member {String} url
 */
LocalizationRead.prototype['url'] = undefined;

/**
 * An opaque, unique identifier for a template
 * @member {String} template
 */
LocalizationRead.prototype['template'] = undefined;

/**
 * @member {module:dyspatch-client/CompiledRead} compiled
 */
LocalizationRead.prototype['compiled'] = undefined;

/**
 * The time of initial creation
 * @member {Date} createdAt
 */
LocalizationRead.prototype['createdAt'] = undefined;

/**
 * The time of last update
 * @member {Date} updatedAt
 */
LocalizationRead.prototype['updatedAt'] = undefined;

/**
 * The user-specified name of a localization
 * @member {String} name
 */
LocalizationRead.prototype['name'] = undefined;

/**
 * the locale group this localization belongs to, if this field is empty the localization does not belong to any locale group
 * @member {String} localeGroup
 */
LocalizationRead.prototype['localeGroup'] = undefined;






export default LocalizationRead;

