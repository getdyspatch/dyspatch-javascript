/**
 * Dyspatch API
 * # Introduction  The Dyspatch API is based on the REST paradigm and features resource based URLs with standard HTTP response codes to indicate errors. We use standard HTTP authentication and request verbs and all responses are JSON formatted. See our [Implementation Guide](https://docs.dyspatch.io/development/implementing_dyspatch/) for more details on how to implement Dyspatch.
 *
 * OpenAPI spec version: 2019.10
 * Contact: support@dyspatch.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.1
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'dyspatch-client/APIError', 'dyspatch-client/Body', 'dyspatch-client/DraftRead', 'dyspatch-client/DraftsRead', 'dyspatch-client/LocalizationKeyRead', 'dyspatch-client/LocalizationMetaRead'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../dyspatch-client/APIError'), require('../dyspatch-client/Body'), require('../dyspatch-client/DraftRead'), require('../dyspatch-client/DraftsRead'), require('../dyspatch-client/LocalizationKeyRead'), require('../dyspatch-client/LocalizationMetaRead'));
  } else {
    // Browser globals (root is window)
    if (!root.DyspatchClient) {
      root.DyspatchClient = {};
    }
    root.DyspatchClient.DraftsApi = factory(root.DyspatchClient.ApiClient, root.DyspatchClient.APIError, root.DyspatchClient.Body, root.DyspatchClient.DraftRead, root.DyspatchClient.DraftsRead, root.DyspatchClient.LocalizationKeyRead, root.DyspatchClient.LocalizationMetaRead);
  }
}(this, function(ApiClient, APIError, Body, DraftRead, DraftsRead, LocalizationKeyRead, LocalizationMetaRead) {
  'use strict';

  /**
   * Drafts service.
   * @module dyspatch-client/DraftsApi
   * @version 3.0.1
   */

  /**
   * Constructs a new DraftsApi. 
   * @alias module:dyspatch-client/DraftsApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the draftsDraftIdGet operation.
     * @callback module:dyspatch-client/DraftsApi~draftsDraftIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:dyspatch-client/DraftRead} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Draft by ID
     * Gets a draft object with the matching ID. The \&quot;compiled\&quot; field will contain the unlocalized default template object.
     * @param {String} draftId A draft ID
     * @param {module:dyspatch-client/String} targetLanguage The type of templating language to compile as. Should only be used for visual templates.
     * @param {module:dyspatch-client/DraftsApi~draftsDraftIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:dyspatch-client/DraftRead}
     */
    this.draftsDraftIdGet = function(draftId, targetLanguage, callback) {
      var postBody = null;

      // verify the required parameter 'draftId' is set
      if (draftId === undefined || draftId === null) {
        throw new Error("Missing the required parameter 'draftId' when calling draftsDraftIdGet");
      }

      // verify the required parameter 'targetLanguage' is set
      if (targetLanguage === undefined || targetLanguage === null) {
        throw new Error("Missing the required parameter 'targetLanguage' when calling draftsDraftIdGet");
      }


      var pathParams = {
        'draftId': draftId
      };
      var queryParams = {
        'targetLanguage': targetLanguage,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = [];
      var accepts = ['application/vnd.dyspatch.2019.10+json'];
      var returnType = DraftRead;

      return this.apiClient.callApi(
        '/drafts/{draftId}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the draftsDraftIdLocalizationKeysGet operation.
     * @callback module:dyspatch-client/DraftsApi~draftsDraftIdLocalizationKeysGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:dyspatch-client/LocalizationKeyRead>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Localization Keys
     * Returns the list of values that need to be translated for the draft. Set the &#x60;Accept&#x60; header to &#x60;application/vnd.dyspatch.2019.10+json&#x60; to get a JSON object, or &#x60;text/vnd.dyspatch.2019.10+x-gettext-translation&#x60; to get the POT file.
     * @param {String} draftId A draft ID
     * @param {Object} opts Optional parameters
     * @param {String} opts.accept A version of the API that should be used for the request. For example, to use version \&quot;2019.10\&quot;, set the value to \&quot;application/vnd.dyspatch.2019.10+json\&quot;.
     * @param {module:dyspatch-client/DraftsApi~draftsDraftIdLocalizationKeysGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:dyspatch-client/LocalizationKeyRead>}
     */
    this.draftsDraftIdLocalizationKeysGet = function(draftId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'draftId' is set
      if (draftId === undefined || draftId === null) {
        throw new Error("Missing the required parameter 'draftId' when calling draftsDraftIdLocalizationKeysGet");
      }


      var pathParams = {
        'draftId': draftId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'Accept': opts['accept']
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = [];
      var accepts = ['application/vnd.dyspatch.2019.10+json', 'text/vnd.dyspatch.2019.10+x-gettext-translation'];
      var returnType = [LocalizationKeyRead];

      return this.apiClient.callApi(
        '/drafts/{draftId}/localizationKeys', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the draftsDraftIdLocalizationsGet operation.
     * @callback module:dyspatch-client/DraftsApi~draftsDraftIdLocalizationsGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:dyspatch-client/LocalizationMetaRead>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Localizations on a Draft
     * Returns localization metadata object for a template draft.
     * @param {String} draftId A draft ID
     * @param {module:dyspatch-client/DraftsApi~draftsDraftIdLocalizationsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:dyspatch-client/LocalizationMetaRead>}
     */
    this.draftsDraftIdLocalizationsGet = function(draftId, callback) {
      var postBody = null;

      // verify the required parameter 'draftId' is set
      if (draftId === undefined || draftId === null) {
        throw new Error("Missing the required parameter 'draftId' when calling draftsDraftIdLocalizationsGet");
      }


      var pathParams = {
        'draftId': draftId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = [];
      var accepts = ['application/vnd.dyspatch.2019.10+json'];
      var returnType = [LocalizationMetaRead];

      return this.apiClient.callApi(
        '/drafts/{draftId}/localizations', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the draftsDraftIdLocalizationsLanguageIdDelete operation.
     * @callback module:dyspatch-client/DraftsApi~draftsDraftIdLocalizationsLanguageIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove a Localization
     * Deletes the localization with the given &#x60;languageId&#x60; if it exists.
     * @param {String} draftId A draft ID
     * @param {String} languageId A language ID (eg: en-US)
     * @param {module:dyspatch-client/DraftsApi~draftsDraftIdLocalizationsLanguageIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.draftsDraftIdLocalizationsLanguageIdDelete = function(draftId, languageId, callback) {
      var postBody = null;

      // verify the required parameter 'draftId' is set
      if (draftId === undefined || draftId === null) {
        throw new Error("Missing the required parameter 'draftId' when calling draftsDraftIdLocalizationsLanguageIdDelete");
      }

      // verify the required parameter 'languageId' is set
      if (languageId === undefined || languageId === null) {
        throw new Error("Missing the required parameter 'languageId' when calling draftsDraftIdLocalizationsLanguageIdDelete");
      }


      var pathParams = {
        'draftId': draftId,
        'languageId': languageId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = [];
      var accepts = ['application/vnd.dyspatch.2019.10+json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/drafts/{draftId}/localizations/{languageId}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the draftsDraftIdLocalizationsLanguageIdPut operation.
     * @callback module:dyspatch-client/DraftsApi~draftsDraftIdLocalizationsLanguageIdPutCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create or Update a Localization
     * Inserts a localization or sets the name on an existing localization that already uses the &#x60;languageId&#x60;.
     * @param {String} draftId A draft ID
     * @param {String} languageId A language ID (eg: en-US)
     * @param {module:dyspatch-client/Body} body 
     * @param {module:dyspatch-client/DraftsApi~draftsDraftIdLocalizationsLanguageIdPutCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.draftsDraftIdLocalizationsLanguageIdPut = function(draftId, languageId, body, callback) {
      var postBody = body;

      // verify the required parameter 'draftId' is set
      if (draftId === undefined || draftId === null) {
        throw new Error("Missing the required parameter 'draftId' when calling draftsDraftIdLocalizationsLanguageIdPut");
      }

      // verify the required parameter 'languageId' is set
      if (languageId === undefined || languageId === null) {
        throw new Error("Missing the required parameter 'languageId' when calling draftsDraftIdLocalizationsLanguageIdPut");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling draftsDraftIdLocalizationsLanguageIdPut");
      }


      var pathParams = {
        'draftId': draftId,
        'languageId': languageId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = [];
      var accepts = ['application/vnd.dyspatch.2019.10+json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/drafts/{draftId}/localizations/{languageId}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the draftsDraftIdLocalizationsLanguageIdTranslationsPut operation.
     * @callback module:dyspatch-client/DraftsApi~draftsDraftIdLocalizationsLanguageIdTranslationsPutCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Set Translations for Language
     * Completely replaces any existing translations for the given language with those provided in request body. Variables embedded in keys or values are expected to be in the format &#x60;%(my_variable)s&#x60; and will automatically convert to the correct Dyspatch format depending on the type of template. Accepts key/value pairs in JSON format or in gettext PO file format. For JSON set &#x60;Content-Type&#x60; header to &#x60;application/json&#x60;. For gettext PO format set &#x60;Content-Type&#x60; header to &#x60;text/x-gettext-translation&#x60;.
     * @param {String} draftId A draft ID
     * @param {String} languageId A language ID (eg: en-US)
     * @param {Object} body 
     * @param {module:dyspatch-client/DraftsApi~draftsDraftIdLocalizationsLanguageIdTranslationsPutCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.draftsDraftIdLocalizationsLanguageIdTranslationsPut = function(draftId, languageId, body, callback) {
      var postBody = body;

      // verify the required parameter 'draftId' is set
      if (draftId === undefined || draftId === null) {
        throw new Error("Missing the required parameter 'draftId' when calling draftsDraftIdLocalizationsLanguageIdTranslationsPut");
      }

      // verify the required parameter 'languageId' is set
      if (languageId === undefined || languageId === null) {
        throw new Error("Missing the required parameter 'languageId' when calling draftsDraftIdLocalizationsLanguageIdTranslationsPut");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling draftsDraftIdLocalizationsLanguageIdTranslationsPut");
      }


      var pathParams = {
        'draftId': draftId,
        'languageId': languageId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = [];
      var accepts = ['application/vnd.dyspatch.2019.10+json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/drafts/{draftId}/localizations/{languageId}/translations', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the draftsDraftIdPublishRequestPost operation.
     * @callback module:dyspatch-client/DraftsApi~draftsDraftIdPublishRequestPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Submit the Draft for Approval
     * Moves the draft into [submitted and locked state](https://docs.dyspatch.io/templates/submitting_a_template/#awaiting-approval). This will allow your email stakeholders to review the template draft and provide feedback.
     * @param {String} draftId A draft ID
     * @param {module:dyspatch-client/DraftsApi~draftsDraftIdPublishRequestPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.draftsDraftIdPublishRequestPost = function(draftId, callback) {
      var postBody = null;

      // verify the required parameter 'draftId' is set
      if (draftId === undefined || draftId === null) {
        throw new Error("Missing the required parameter 'draftId' when calling draftsDraftIdPublishRequestPost");
      }


      var pathParams = {
        'draftId': draftId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = [];
      var accepts = ['application/vnd.dyspatch.2019.10+json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/drafts/{draftId}/publishRequest', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the draftsGet operation.
     * @callback module:dyspatch-client/DraftsApi~draftsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:dyspatch-client/DraftsRead} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List Drafts
     * Gets a list of all drafts for your oranization. Up to 25 results returned before results are paginated.
     * @param {Object} opts Optional parameters
     * @param {String} opts.cursor A cursor value used to retrieve a specific page from a paginated result set.
     * @param {module:dyspatch-client/String} opts.status Filter the list of drafts by a particular status
     * @param {module:dyspatch-client/DraftsApi~draftsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:dyspatch-client/DraftsRead}
     */
    this.draftsGet = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'cursor': opts['cursor'],
        'status': opts['status'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = [];
      var accepts = ['application/vnd.dyspatch.2019.10+json'];
      var returnType = DraftsRead;

      return this.apiClient.callApi(
        '/drafts', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
