/**
 * Dyspatch API
 * # Introduction  The Dyspatch API is based on the REST paradigm, and features resource based URLs with standard HTTP response codes to indicate errors. We use standard HTTP authentication and request verbs, and all responses are JSON formatted. See our [Implementation Guide](https://docs.dyspatch.io/development/implementing_dyspatch/) for more details on how to implement Dyspatch.  ## API Client Libraries Dyspatch provides API Clients for popular languages and web frameworks.  - [Java](https://github.com/getdyspatch/dyspatch-java) - [Javascript](https://github.com/getdyspatch/dyspatch-javascript) - [Python](https://github.com/getdyspatch/dyspatch-python) - [C#](https://github.com/getdyspatch/dyspatch-dotnet) - [Go](https://github.com/getdyspatch/dyspatch-golang) - [Ruby](https://github.com/getdyspatch/dyspatch-ruby) 
 *
 * The version of the OpenAPI document: 2020.04
 * Contact: support@dyspatch.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import APIError from '../dyspatch-client/APIError';
import LocalizationRead from '../dyspatch-client/LocalizationRead';

/**
* Localizations service.
* @module dyspatch-client/LocalizationsApi
* @version 5.0.1
*/
export default class LocalizationsApi {

    /**
    * Constructs a new LocalizationsApi. 
    * @alias module:dyspatch-client/LocalizationsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }
dfkajsldfjasldkjfaslkdjflaskjdflksajdlfkjs


    /**
     * Get Localization Object by ID
     * Returns a specific localization object with a matching ID
     * @param {String} localizationId A localization ID
     * @param {module:dyspatch-client/String} targetLanguage The type of templating language to compile as. Should only be used for visual templates.
     * @param {String} accept A version of the API that should be used for the request. For example, to use version \"2020.04\", set the value to \"application/vnd.dyspatch.2020.04+json\"
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:dyspatch-client/LocalizationRead} and HTTP response
     */
    getLocalizationByIdWithHttpInfo(localizationId, targetLanguage, accept) {
      let postBody = null;
      // verify the required parameter 'localizationId' is set
      if (localizationId === undefined || localizationId === null) {
        throw new Error("Missing the required parameter 'localizationId' when calling getLocalizationById");
      }
      // verify the required parameter 'targetLanguage' is set
      if (targetLanguage === undefined || targetLanguage === null) {
        throw new Error("Missing the required parameter 'targetLanguage' when calling getLocalizationById");
      }
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling getLocalizationById");
      }

      let pathParams = {
        'localizationId': localizationId
      };
      let queryParams = {
        'targetLanguage': targetLanguage
      };
      let headerParams = {
        'Accept': accept
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/vnd.dyspatch.2020.04+json', '*/*'];
      let returnType = LocalizationRead;
      return this.apiClient.callApi(
        '/localizations/{localizationId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get Localization Object by ID
     * Returns a specific localization object with a matching ID
     * @param {String} localizationId A localization ID
     * @param {module:dyspatch-client/String} targetLanguage The type of templating language to compile as. Should only be used for visual templates.
     * @param {String} accept A version of the API that should be used for the request. For example, to use version \"2020.04\", set the value to \"application/vnd.dyspatch.2020.04+json\"
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:dyspatch-client/LocalizationRead}
     */
    getLocalizationById(localizationId, targetLanguage, accept) {
      return this.getLocalizationByIdWithHttpInfo(localizationId, targetLanguage, accept)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
