/**
 * Dyspatch API
 * # Introduction  The Dyspatch API is based on the REST paradigm, and features resource based URLs with standard HTTP response codes to indicate errors. We use standard HTTP authentication and request verbs, and all responses are JSON formatted. See our [Implementation Guide](https://docs.dyspatch.io/development/implementing_dyspatch/) for more details on how to implement Dyspatch.  ## API Client Libraries Dyspatch provides API Clients for popular languages and web frameworks.  - [Java](https://github.com/getdyspatch/dyspatch-java) - [Javascript](https://github.com/getdyspatch/dyspatch-javascript) - [Python](https://github.com/getdyspatch/dyspatch-python) - [C#](https://github.com/getdyspatch/dyspatch-dotnet) - [Go](https://github.com/getdyspatch/dyspatch-golang) - [Ruby](https://github.com/getdyspatch/dyspatch-ruby) 
 *
 * The version of the OpenAPI document: 2020.08
 * Contact: support@dyspatch.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CompiledRead from './CompiledRead';
import LocalizationMetaRead from './LocalizationMetaRead';

/**
 * The DraftRead model module.
 * @module dyspatch-client/DraftRead
 * @version 6.0.0
 */
class DraftRead {
    /**
     * Constructs a new <code>DraftRead</code>.
     * template draft metadata included latest draft revision
     * @alias module:dyspatch-client/DraftRead
     */
    constructor() { 
        
        DraftRead.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>DraftRead</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:dyspatch-client/DraftRead} obj Optional instance to populate.
     * @return {module:dyspatch-client/DraftRead} The populated <code>DraftRead</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DraftRead();

            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('template')) {
                obj['template'] = ApiClient.convertToType(data['template'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('url')) {
                obj['url'] = ApiClient.convertToType(data['url'], 'String');
            }
            if (data.hasOwnProperty('compiled')) {
                obj['compiled'] = CompiledRead.constructFromObject(data['compiled']);
            }
            if (data.hasOwnProperty('createdAt')) {
                obj['createdAt'] = ApiClient.convertToType(data['createdAt'], 'Date');
            }
            if (data.hasOwnProperty('updatedAt')) {
                obj['updatedAt'] = ApiClient.convertToType(data['updatedAt'], 'Date');
            }
            if (data.hasOwnProperty('localizations')) {
                obj['localizations'] = ApiClient.convertToType(data['localizations'], [LocalizationMetaRead]);
            }
        }
        return obj;
    }


}

/**
 * An opaque, unique identifier for a draft
 * @member {String} id
 */
DraftRead.prototype['id'] = undefined;

/**
 * An opaque, unique identifier for a template
 * @member {String} template
 */
DraftRead.prototype['template'] = undefined;

/**
 * The name of a draft
 * @member {String} name
 */
DraftRead.prototype['name'] = undefined;

/**
 * The API url for a specific draft
 * @member {String} url
 */
DraftRead.prototype['url'] = undefined;

/**
 * @member {module:dyspatch-client/CompiledRead} compiled
 */
DraftRead.prototype['compiled'] = undefined;

/**
 * The time of initial creation
 * @member {Date} createdAt
 */
DraftRead.prototype['createdAt'] = undefined;

/**
 * The time of last update
 * @member {Date} updatedAt
 */
DraftRead.prototype['updatedAt'] = undefined;

/**
 * A list of the Template's available localizations
 * @member {Array.<module:dyspatch-client/LocalizationMetaRead>} localizations
 */
DraftRead.prototype['localizations'] = undefined;






export default DraftRead;

