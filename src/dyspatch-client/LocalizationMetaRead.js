/**
 * Dyspatch API
 * # Introduction  The Dyspatch API is based on the REST paradigm, and features resource based URLs with standard HTTP response codes to indicate errors. We use standard HTTP authentication and request verbs, and all responses are JSON formatted. See our [Implementation Guide](https://docs.dyspatch.io/development/implementing_dyspatch/) for more details on how to implement Dyspatch. 
 *
 * OpenAPI spec version: 2019.03
 * Contact: support@dyspatch.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.1
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'dyspatch-client/LanguageId', 'dyspatch-client/LocalizationId', 'dyspatch-client/LocalizationName', 'dyspatch-client/LocalizationUrl'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('./LanguageId'), require('./LocalizationId'), require('./LocalizationName'), require('./LocalizationUrl'));
  } else {
    // Browser globals (root is window)
    if (!root.DyspatchClient) {
      root.DyspatchClient = {};
    }
    root.DyspatchClient.LocalizationMetaRead = factory(root.DyspatchClient.ApiClient, root.DyspatchClient.LanguageId, root.DyspatchClient.LocalizationId, root.DyspatchClient.LocalizationName, root.DyspatchClient.LocalizationUrl);
  }
}(this, function(ApiClient, LanguageId, LocalizationId, LocalizationName, LocalizationUrl) {
  'use strict';




  /**
   * The LocalizationMetaRead model module.
   * @module dyspatch-client/LocalizationMetaRead
   * @version 1.0.0
   */

  /**
   * Constructs a new <code>LocalizationMetaRead</code>.
   * @alias module:dyspatch-client/LocalizationMetaRead
   * @class
   */
  var exports = function() {
    var _this = this;





  };

  /**
   * Constructs a <code>LocalizationMetaRead</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:dyspatch-client/LocalizationMetaRead} obj Optional instance to populate.
   * @return {module:dyspatch-client/LocalizationMetaRead} The populated <code>LocalizationMetaRead</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();

      if (data.hasOwnProperty('id')) {
        obj['id'] = LocalizationId.constructFromObject(data['id']);
      }
      if (data.hasOwnProperty('language')) {
        obj['language'] = LanguageId.constructFromObject(data['language']);
      }
      if (data.hasOwnProperty('name')) {
        obj['name'] = LocalizationName.constructFromObject(data['name']);
      }
      if (data.hasOwnProperty('url')) {
        obj['url'] = LocalizationUrl.constructFromObject(data['url']);
      }
    }
    return obj;
  }

  /**
   * @member {module:dyspatch-client/LocalizationId} id
   */
  exports.prototype['id'] = undefined;
  /**
   * @member {module:dyspatch-client/LanguageId} language
   */
  exports.prototype['language'] = undefined;
  /**
   * @member {module:dyspatch-client/LocalizationName} name
   */
  exports.prototype['name'] = undefined;
  /**
   * @member {module:dyspatch-client/LocalizationUrl} url
   */
  exports.prototype['url'] = undefined;



  return exports;
}));


