/**
 * Dyspatch API
 * # Introduction  The Dyspatch API is based on the REST paradigm, and features resource based URLs with standard HTTP response codes to indicate errors. We use standard HTTP authentication and request verbs, and all responses are JSON formatted. See our [Implementation Guide](https://docs.dyspatch.io/development/implementing_dyspatch/) for more details on how to implement Dyspatch.  ## API Client Libraries Dyspatch provides API Clients for popular languages and web frameworks.  - [Java](https://github.com/getdyspatch/dyspatch-java) - [Javascript](https://github.com/getdyspatch/dyspatch-javascript) - [Python](https://github.com/getdyspatch/dyspatch-python) - [C#](https://github.com/getdyspatch/dyspatch-dotnet) - [Go](https://github.com/getdyspatch/dyspatch-golang) - [Ruby](https://github.com/getdyspatch/dyspatch-ruby) 
 *
 * The version of the OpenAPI document: 2020.08
 * Contact: support@dyspatch.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The APIError model module.
 * @module dyspatch-client/APIError
 * @version 6.0.0
 */
class APIError {
    /**
     * Constructs a new <code>APIError</code>.
     * possible errors from the api
     * @alias module:dyspatch-client/APIError
     */
    constructor() { 
        
        APIError.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>APIError</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:dyspatch-client/APIError} obj Optional instance to populate.
     * @return {module:dyspatch-client/APIError} The populated <code>APIError</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new APIError();

            if (data.hasOwnProperty('code')) {
                obj['code'] = ApiClient.convertToType(data['code'], 'String');
            }
            if (data.hasOwnProperty('message')) {
                obj['message'] = ApiClient.convertToType(data['message'], 'String');
            }
            if (data.hasOwnProperty('parameter')) {
                obj['parameter'] = ApiClient.convertToType(data['parameter'], 'String');
            }
        }
        return obj;
    }


}

/**
 * Error code:   * server_error - Internal server error.   * invalid_parameter - Validation error, parameter will contain invalid field and message will contain the reason.   * invalid_body - Body could not be parsed, message will contain the reason.   * invalid_request - Validation error, the protocol used to make the request was not https.   * unauthorized - Credentials were found but permissions were not sufficient.   * unauthenticated - Credentials were not found or were not valid.   * not_found - The requested resource was not found.   * rate_limited - The request was refused because a rate limit was exceeded. There is an account wide rate limit of 3600 requests per-minute, although that is subject to change. The current remaining rate limit can be viewed by checking the X-Ratelimit-Remaining header.   * prohibited_action - The request was refused because an action was not valid for the requested resource. Typically this will happen if you try to make changes to a locked resource. 
 * @member {module:dyspatch-client/APIError.CodeEnum} code
 */
APIError.prototype['code'] = undefined;

/**
 * Human readable error message
 * @member {String} message
 */
APIError.prototype['message'] = undefined;

/**
 * The invalid parameter, if 'code' is invalid_parameter
 * @member {String} parameter
 */
APIError.prototype['parameter'] = undefined;





/**
 * Allowed values for the <code>code</code> property.
 * @enum {String}
 * @readonly
 */
APIError['CodeEnum'] = {

    /**
     * value: "server_error"
     * @const
     */
    "server_error": "server_error",

    /**
     * value: "invalid_parameter"
     * @const
     */
    "invalid_parameter": "invalid_parameter",

    /**
     * value: "invalid_body"
     * @const
     */
    "invalid_body": "invalid_body",

    /**
     * value: "invalid_request"
     * @const
     */
    "invalid_request": "invalid_request",

    /**
     * value: "unauthorized"
     * @const
     */
    "unauthorized": "unauthorized",

    /**
     * value: "unauthenticated"
     * @const
     */
    "unauthenticated": "unauthenticated",

    /**
     * value: "not_found"
     * @const
     */
    "not_found": "not_found",

    /**
     * value: "rate_limited"
     * @const
     */
    "rate_limited": "rate_limited",

    /**
     * value: "prohibited_action"
     * @const
     */
    "prohibited_action": "prohibited_action"
};



export default APIError;

