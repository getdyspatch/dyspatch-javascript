/*
 * Dyspatch API
 * # Introduction  The Dyspatch API is based on the REST paradigm and features resource based URLs with standard HTTP response codes to indicate errors. We use standard HTTP authentication and request verbs and all responses are JSON formatted. See our [Implementation Guide](https://docs.dyspatch.io/development/implementing_dyspatch/) for more details on how to implement Dyspatch.
 *
 * OpenAPI spec version: 2019.10
 * Contact: support@dyspatch.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.10
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.DyspatchClient);
  }
}(this, function(expect, DyspatchClient) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new DyspatchClient.DraftsApi();
  });

  describe('(package)', function() {
    describe('DraftsApi', function() {
      describe('draftsDraftIdGet', function() {
        it('should call draftsDraftIdGet successfully', function(done) {
          // TODO: uncomment, update parameter values for draftsDraftIdGet call and complete the assertions
          /*
          var draftId = "draftId_example";
          var targetLanguage = "targetLanguage_example";

          instance.draftsDraftIdGet(draftId, targetLanguage, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(DyspatchClient.DraftRead);
            expect(data.id).to.be.a('string');
            expect(data.id).to.be("tdft_g3L7Cw6Hp5wU");
            expect(data.template).to.be.a('string');
            expect(data.template).to.be("tem_g3L7Cw6Hp5wU");
            expect(data.name).to.be.a('string');
            expect(data.name).to.be("");
            expect(data.url).to.be.a('string');
            expect(data.url).to.be("/drafts/tdft_g3L7Cw6Hp5wUaf395LehwK/dft_g3L7Cw6Hp5wU");
            expect(data.compiled).to.be.a(DyspatchClient.CompiledRead);
                  expect(data.compiled.sender).to.be.a('string');
              expect(data.compiled.sender).to.be("Example <example@dyspatch.io>");
              expect(data.compiled.replyTo).to.be.a('string');
              expect(data.compiled.replyTo).to.be("Example <example@dyspatch.io>");
              expect(data.compiled.subject).to.be.a(Blob);
              expect(data.compiled.subject).to.be("PGh0bWw+PC9odG1sPgo=");
              expect(data.compiled.html).to.be.a(Blob);
              expect(data.compiled.html).to.be("PGh0bWw+PC9odG1sPgo=");
              expect(data.compiled.text).to.be.a(Blob);
              expect(data.compiled.text).to.be("PGh0bWw+PC9odG1sPgo=");
            expect(data.createdAt).to.be.a(Date);
            expect(data.createdAt).to.be(new Date());
            expect(data.updatedAt).to.be.a(Date);
            expect(data.updatedAt).to.be(new Date());
            {
              let dataCtr = data.localizations;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(DyspatchClient.LocalizationMetaRead);
                expect(data.id).to.be.a('string');
                expect(data.id).to.be("loc_g3L7Cw6Hp5wUaf395LehwK");
                expect(data.language).to.be.a('string');
                expect(data.language).to.be("en-US");
                expect(data.name).to.be.a('string');
                expect(data.name).to.be("English (US)");
                expect(data.url).to.be.a('string');
                expect(data.url).to.be("/localizations/loc_g3L7Cw6Hp5wUaf395LehwK");
                expect(data.draft).to.be.a('string');
                expect(data.draft).to.be("tdft_g3L7Cw6Hp5wU");
              }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('draftsDraftIdLocalizationKeysGet', function() {
        it('should call draftsDraftIdLocalizationKeysGet successfully', function(done) {
          // TODO: uncomment, update parameter values for draftsDraftIdLocalizationKeysGet call and complete the assertions
          /*
          var draftId = "draftId_example";
          var opts = {};
          opts.accept = "accept_example";

          instance.draftsDraftIdLocalizationKeysGet(draftId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(DyspatchClient.LocalizationKeyRead);
              expect(data.key).to.be.a('string');
              expect(data.key).to.be("");
              expect(data.comment).to.be.a('string');
              expect(data.comment).to.be("");
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('draftsDraftIdLocalizationsGet', function() {
        it('should call draftsDraftIdLocalizationsGet successfully', function(done) {
          // TODO: uncomment, update parameter values for draftsDraftIdLocalizationsGet call and complete the assertions
          /*
          var draftId = "draftId_example";

          instance.draftsDraftIdLocalizationsGet(draftId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(DyspatchClient.LocalizationMetaRead);
              expect(data.id).to.be.a('string');
              expect(data.id).to.be("loc_g3L7Cw6Hp5wUaf395LehwK");
              expect(data.language).to.be.a('string');
              expect(data.language).to.be("en-US");
              expect(data.name).to.be.a('string');
              expect(data.name).to.be("English (US)");
              expect(data.url).to.be.a('string');
              expect(data.url).to.be("/localizations/loc_g3L7Cw6Hp5wUaf395LehwK");
              expect(data.draft).to.be.a('string');
              expect(data.draft).to.be("tdft_g3L7Cw6Hp5wU");
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('draftsDraftIdLocalizationsLanguageIdDelete', function() {
        it('should call draftsDraftIdLocalizationsLanguageIdDelete successfully', function(done) {
          // TODO: uncomment, update parameter values for draftsDraftIdLocalizationsLanguageIdDelete call
          /*
          var draftId = "draftId_example";
          var languageId = "languageId_example";

          instance.draftsDraftIdLocalizationsLanguageIdDelete(draftId, languageId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('draftsDraftIdLocalizationsLanguageIdPut', function() {
        it('should call draftsDraftIdLocalizationsLanguageIdPut successfully', function(done) {
          // TODO: uncomment, update parameter values for draftsDraftIdLocalizationsLanguageIdPut call
          /*
          var draftId = "draftId_example";
          var languageId = "languageId_example";
          var body = new DyspatchClient.Body();
          body.name = "English (US)";

          instance.draftsDraftIdLocalizationsLanguageIdPut(draftId, languageId, body, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('draftsDraftIdLocalizationsLanguageIdTranslationsPut', function() {
        it('should call draftsDraftIdLocalizationsLanguageIdTranslationsPut successfully', function(done) {
          // TODO: uncomment, update parameter values for draftsDraftIdLocalizationsLanguageIdTranslationsPut call
          /*
          var draftId = "draftId_example";
          var languageId = "languageId_example";
          var body = null;

          instance.draftsDraftIdLocalizationsLanguageIdTranslationsPut(draftId, languageId, body, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('draftsDraftIdPublishRequestPost', function() {
        it('should call draftsDraftIdPublishRequestPost successfully', function(done) {
          // TODO: uncomment, update parameter values for draftsDraftIdPublishRequestPost call
          /*
          var draftId = "draftId_example";

          instance.draftsDraftIdPublishRequestPost(draftId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('draftsGet', function() {
        it('should call draftsGet successfully', function(done) {
          // TODO: uncomment, update parameter values for draftsGet call and complete the assertions
          /*
          var opts = {};
          opts.cursor = "cursor_example";
          opts.status = "status_example";

          instance.draftsGet(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(DyspatchClient.DraftsRead);
            expect(data.cursor).to.be.a(DyspatchClient.Cursor);
                  expect(data.cursor.next).to.be.a('string');
              expect(data.cursor.next).to.be("");
              expect(data.cursor.hasMore).to.be.a('boolean');
              expect(data.cursor.hasMore).to.be(false);
            {
              let dataCtr = data.data;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(DyspatchClient.DraftMetaRead);
                expect(data.id).to.be.a('string');
                expect(data.id).to.be("tdft_g3L7Cw6Hp5wU");
                expect(data.templateId).to.be.a('string');
                expect(data.templateId).to.be("tem_g3L7Cw6Hp5wU");
                expect(data.name).to.be.a('string');
                expect(data.name).to.be("");
                expect(data.description).to.be.a('string');
                expect(data.description).to.be("");
                expect(data.url).to.be.a('string');
                expect(data.url).to.be("/drafts/tdft_g3L7Cw6Hp5wUaf395LehwK/dft_g3L7Cw6Hp5wU");
                expect(data.createdAt).to.be.a(Date);
                expect(data.createdAt).to.be(new Date());
                expect(data.updatedAt).to.be.a(Date);
                expect(data.updatedAt).to.be(new Date());
              }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
