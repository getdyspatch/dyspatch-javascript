/*
 * Dyspatch API
 * # Introduction  The Dyspatch API is based on the REST paradigm and features resource based URLs with standard HTTP response codes to indicate errors. We use standard HTTP authentication and request verbs and all responses are JSON formatted. See our [Implementation Guide](https://docs.dyspatch.io/development/implementing_dyspatch/) for more details on how to implement Dyspatch.
 *
 * OpenAPI spec version: 2019.10
 * Contact: support@dyspatch.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.10
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.DyspatchClient);
  }
}(this, function(expect, DyspatchClient) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new DyspatchClient.TemplatesApi();
  });

  describe('(package)', function() {
    describe('TemplatesApi', function() {
      describe('templatesGet', function() {
        it('should call templatesGet successfully', function(done) {
          // TODO: uncomment, update parameter values for templatesGet call and complete the assertions
          /*
          var opts = {};
          opts.cursor = "cursor_example";

          instance.templatesGet(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(DyspatchClient.TemplatesRead);
            expect(data.cursor).to.be.a(DyspatchClient.Cursor);
                  expect(data.cursor.next).to.be.a('string');
              expect(data.cursor.next).to.be("");
              expect(data.cursor.hasMore).to.be.a('boolean');
              expect(data.cursor.hasMore).to.be(false);
            {
              let dataCtr = data.data;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(DyspatchClient.TemplateMetaRead);
                expect(data.id).to.be.a('string');
                expect(data.id).to.be("tem_g3L7Cw6Hp5wU");
                expect(data.name).to.be.a('string');
                expect(data.name).to.be("");
                expect(data.description).to.be.a('string');
                expect(data.description).to.be("");
                expect(data.url).to.be.a('string');
                expect(data.url).to.be("/templates/tem_g3L7Cw6Hp5wUaf395LehwK");
                {
                  let dataCtr = data.localizations;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(DyspatchClient.LocalizationMetaRead);
                    expect(data.id).to.be.a('string');
                    expect(data.id).to.be("loc_g3L7Cw6Hp5wUaf395LehwK");
                    expect(data.language).to.be.a('string');
                    expect(data.language).to.be("en-US");
                    expect(data.name).to.be.a('string');
                    expect(data.name).to.be("English (US)");
                    expect(data.url).to.be.a('string');
                    expect(data.url).to.be("/localizations/loc_g3L7Cw6Hp5wUaf395LehwK");
                    expect(data.draft).to.be.a('string');
                    expect(data.draft).to.be("tdft_g3L7Cw6Hp5wU");
                  }
                }
                expect(data.createdAt).to.be.a(Date);
                expect(data.createdAt).to.be(new Date());
                expect(data.updatedAt).to.be.a(Date);
                expect(data.updatedAt).to.be(new Date());
              }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('templatesTemplateIdGet', function() {
        it('should call templatesTemplateIdGet successfully', function(done) {
          // TODO: uncomment, update parameter values for templatesTemplateIdGet call and complete the assertions
          /*
          var templateId = "templateId_example";
          var targetLanguage = "targetLanguage_example";

          instance.templatesTemplateIdGet(templateId, targetLanguage, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(DyspatchClient.TemplateRead);
            expect(data.id).to.be.a('string');
            expect(data.id).to.be("tem_g3L7Cw6Hp5wU");
            expect(data.name).to.be.a('string');
            expect(data.name).to.be("");
            expect(data.description).to.be.a('string');
            expect(data.description).to.be("");
            expect(data.url).to.be.a('string');
            expect(data.url).to.be("/templates/tem_g3L7Cw6Hp5wUaf395LehwK");
            expect(data.compiled).to.be.a(DyspatchClient.CompiledRead);
                  expect(data.compiled.sender).to.be.a('string');
              expect(data.compiled.sender).to.be("Example <example@dyspatch.io>");
              expect(data.compiled.replyTo).to.be.a('string');
              expect(data.compiled.replyTo).to.be("Example <example@dyspatch.io>");
              expect(data.compiled.subject).to.be.a(Blob);
              expect(data.compiled.subject).to.be("PGh0bWw+PC9odG1sPgo=");
              expect(data.compiled.html).to.be.a(Blob);
              expect(data.compiled.html).to.be("PGh0bWw+PC9odG1sPgo=");
              expect(data.compiled.text).to.be.a(Blob);
              expect(data.compiled.text).to.be("PGh0bWw+PC9odG1sPgo=");
            expect(data.createdAt).to.be.a(Date);
            expect(data.createdAt).to.be(new Date());
            expect(data.updatedAt).to.be.a(Date);
            expect(data.updatedAt).to.be(new Date());
            {
              let dataCtr = data.localizations;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(DyspatchClient.LocalizationMetaRead);
                expect(data.id).to.be.a('string');
                expect(data.id).to.be("loc_g3L7Cw6Hp5wUaf395LehwK");
                expect(data.language).to.be.a('string');
                expect(data.language).to.be("en-US");
                expect(data.name).to.be.a('string');
                expect(data.name).to.be("English (US)");
                expect(data.url).to.be.a('string');
                expect(data.url).to.be("/localizations/loc_g3L7Cw6Hp5wUaf395LehwK");
                expect(data.draft).to.be.a('string');
                expect(data.draft).to.be("tdft_g3L7Cw6Hp5wU");
              }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
